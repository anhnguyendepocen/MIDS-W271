effect.size)
all.units <- c(control.units, treatment.units)
treatment.vector <- c(rep(0,sample.size), rep(1,sample.size))
p.value <- summary(lm(all.units ~ treatment.vector))
$coefficients[2,4]
effect.detected <- p.value < 0.05
return(effect.detected)
}
simulate.study.lm <- function(baseline, effect.size, sample.size){
control.units <- rbinom(sample.size, 1, baseline)
treatment.units <- rbinom(sample.size, 1, baseline + effect.size)
all.units <- c(control.units, treatment.units)
treatment.vector <- c(rep(0,sample.size), rep(1,sample.size))
p.value <- summary(lm(all.units ~ treatment.vector))
$coefficients[2,4]
simulate.study.lm <- function(baseline, effect.size, sample.size){
control.units <- rbinom(sample.size, 1, baseline)
treatment.units <- rbinom(sample.size, 1, baseline + effect.size)
all.units <- c(control.units, treatment.units)
treatment.vector <- c(rep(0,sample.size), rep(1,sample.size))
p.value <- summary(lm(all.units ~ treatment.vector))$coefficients[2,4]
effect.detected <- p.value < 0.05
return(effect.detected)
}
get.power <- function(baseline, effect.size, sample.size){
return(mean(replicate(2000, simulate.study.lm(baseline, effect.size, sample.size))))
}
get.power(.1, .05, 100)
get.power(.1, .1, 100)
get.power(.1, .15, 100)
get.power(.1, .2, 100)
get.power(.1, .25, 100)
get.power(.1, .05, 100)
get.power(.1, .05, 200)
get.power(.1, .05, 300)
get.power(.1, .05, 400)
get.power(.1, .05, 500)
get.power(.1, .05, 1000)
get.power(.1, .05, 5000)
summary(lm(outcomes ~ treatment))
estimate.in.confidence.interval <- function(){
true.effect <- 25
#Simulate outcomes
po.control <- c(seq(from = 1, to = 20), seq(from = 51, to = 70))
po.treatment <- po.control + true.effect
treatment <- randomize()
outcomes <- po.treatment * treatment + po.control*(1-treatment)
#Run regression
regression <- summary(lm(outcomes ~ treatment))
estimate <- regression$coefficients[2,1]
standard.error <- regression$coefficients[2,2]
lower.bound <- estimate - standard.error * 1.96
upper.bound <- estimate + standard.error * 1.96
#Is estimate in CI?
estimate.in.ci <- lower.bound < true.effect & upper.bound > true.effect
return(estimate.in.ci)
}
estimate.in.confidence.interval()
mean(replicate(10000, estimate.in.confidence.interval()))
N   <- 5
vec <- c(-1, 1)
lst <- lapply(numeric(N), function(x) vec)
as.matrix(expand.grid(lst))
combo <- as.matrix(expand.grid(lst))
N   <- 6
combo <- as.matrix(expand.grid(lst))
N   <- 6
vec <- c(-1, 1)
lst <- lapply(numeric(N), function(x) vec)
combo <- as.matrix(expand.grid(lst))
combo
combo[1,:]
combo$0
combo$1
combo[1]
combo[1:]
combo[1,]
test<-combo[1,]
test<-combo[1,]$num
str(combo[1,])
combo[1,]*2
N   <- 6
vec <- c(0, 1)
lst <- lapply(numeric(N), function(x) vec)
combo <- as.matrix(expand.grid(lst))
combo[1,]
1-combo[1,]
combo
combo*30 + (1-combo)*60
randomization <- combo*30 + (1-combo)*60
t(randomization)
?rowMeans
rowMeans(randomization)
?mean
mean(rowMeans(randomization))
N <- 6
vec <- c(0, 1)
lst <- lapply(numeric(N), function(x) vec)
combo <- as.matrix(expand.grid(lst))
randomization <- combo*30 + (1-combo)*60
Expected.Di <- mean(rowMeans(randomization))
N <- 6
vec <- c(0, 1)
lst <- lapply(numeric(N), function(x) vec)
combo <- as.matrix(expand.grid(lst))
randomization <- combo*60 + (1-combo)*30
Expected.Di <- mean(rowMeans(randomization))
randomize <- function() sample(c(rep(0,20),rep(1,20)))
group <- c(rep("Man",20),rep("Woman",20))
table(group, randomize())
table(group, randomize())
table(group, randomize())
est.ate <- function(outcome, treat) mean(outcome[treat==1]) -
mean(outcome[treat==0])
sim.normal.study <- function(){
po.control <- c(seq(from = 1, to = 20), seq(from = 51, to = 70))
po.treatment <- po.control
treatment <- randomize()
outcomes <- po.treatment * treatment + po.control * (1-treatment)
ate <- est.ate(outcomes, treatment)
n.women.treatment <- table(group, treatment)[2,2]
return(list(ate = ate, n.women.treatment = n.women.treatment))
}
results <- t(replicate(1000, sim.normal.study()))
View(results)
plot(results)
View(results)
randomize.blocked <- function(){
c(
sample(c(rep(0,10),rep(1,10))), #group A
sample(c(rep(0,10),rep(1,10))) #group B
) }
table(group, randomize.blocked())
table(group, randomize.blocked())
table(group, randomize.blocked())
po.control <- c(seq(from = 1, to = 20), seq(from = 51, to = 70))
po.treatment <- po.control + 10 #simulate effect of 10
treatment.blocked <- randomize.blocked()
outcomes.blocked <- po.treatment * treatment.blocked + po.control * (1-treatment.blocked)
ate <- est.ate(outcomes.blocked, treatment.blocked)
ate
distribution.under.sharp.null.blocked <- replicate(5000, est.ate(outcomes.blocked,
randomize.blocked()))
plot(density(distribution.under.sharp.null), col="red", ylim=c(0,.17))
distribution.under.sharp.null <- replicate(5000, est.ate(outcomes, randomize()))
lines(density(distribution.under.sharp.null.blocked), col="blue")
plot(density(distribution.under.sharp.null.blocked), col="blue")
mean(ate < distribution.under.sharp.null.blocked)
lines(density(distribution.under.sharp.null.blocked), col="blue")
lines(density(distribution.under.sharp.null.blocked), col="red")
lines(density(distribution.under.sharp.null.blocked), col="blue")
distribution.under.sharp.null <- replicate(5000, est.ate(outcomes, randomize()))
treatment <- randomize() #Conduct randomization for this experiment
treatment
outcomes <- po.treatment*treatment + po.control*(1-treatment)
outcomes
est.ate <- function(outcome, treat) mean(outcome[treat==1]) - mean(outcome[treat==0])
ate <- est.ate(outcomes, treatment) #Compute the average treatment effect for this experiment
ate #you see a difference, despite there being no effect!
distribution.under.sharp.null <- replicate(5000, est.ate(outcomes, randomize()))
plot(density(distribution.under.sharp.null)) #It's likely we get big
plot(density(distribution.under.sharp.null), col="red", ylim=c(0,.17))
abline(v=ate)
lines(density(distribution.under.sharp.null.blocked), col="blue")
po.control <- c(seq(from = 1, to = 20), seq(from = 51, to = 70))
po.treatment <- po.control + 10 #simulate effect of 10
treatment <- randomize()
outcomes <- po.treatment * treatment + po.control * (1-treatment)
summary(lm(outcomes ~ treatment)) #without block indicator
summary(lm(outcomes ~ treatment + factor(group))) #with block
indicator
mean(ate < distribution.under.sharp.null)
po.control <- c(seq(from = 1, to = 20), seq(from = 51, to = 70))
po.treatment <- po.control + 10 #simulate effect of 10
treatment.blocked <- randomize.blocked()
outcomes.blocked <- po.treatment * treatment.blocked + po.control * (1-treatment.blocked)
ate <- est.ate(outcomes.blocked, treatment.blocked)
ate
distribution.under.sharp.null.blocked <- replicate(5000, est.ate(outcomes.blocked,
randomize.blocked()))
mean(ate < distribution.under.sharp.null.blocked)
n.classrooms <- 8
n.students <- 16
classroom.ids <- unlist(lapply(1:n.classrooms, function(x)
rep(x,times=n.students)))
classroom.ids
all.classrooms <- unique(classroom.ids)
all.classrooms
classroom.level.noise <- rnorm(length(all.classrooms))
classroom.level.noise
classroom.level.noise[classroom.ids]
classroom.level.noise
student.outcomes.control <- rnorm(length(classroom.ids)) +
classroom.level.noise[classroom.ids]
student.outcomes.control
student.outcomes.treat <- student.outcomes.control + 0.75
randomize.clustered <- function(){
treat.classroom.ids <- sample(all.classrooms, n.classrooms/2)
return(
as.numeric(classroom.ids %in% treat.classroom.ids)
) }
randomize.clustered()
randomize.clustered()
randomize.clustered()
#Clustered
treat <- randomize.clustered()
outcomes <- treat * student.outcomes.treat + (1-treat) * student.outcomes.control
ate <- est.ate(outcomes, treat)
ate
distribution.under.sharp.null <- replicate(5000, est.ate(outcomes, randomize.clustered()))
plot(density(distribution.under.sharp.null))
abline(v=ate)
mean(ate < distribution.under.sharp.null) #p-value
randomize.ignorning.clustering <- function()
sample(c(rep(0,n.classrooms*n.students/
2),rep(1,n.classrooms*n.students/2)))
randomize.ignorning.clustering()
distribution.under.sharp.null.wrong <- replicate(5000, est.ate(outcomes, randomize.ignorning.clustering()))
plot(density(distribution.under.sharp.null), ylim=c(0,1.5))
lines(density(distribution.under.sharp.null.wrong))
abline(v=ate)
mean(ate < distribution.under.sharp.null.wrong) #p-value
plot(density(replicate(5000, est.ate(rnorm(length(classroom.ids)), randomize.clustered()))), xlim=c(-2,2)) #no classroom level noise added
lines(density(replicate(5000, est.ate(rnorm(length(classroom.ids)) +
classroom.level.noise[classroom.ids], randomize.clustered()))))
#classroom level noise added
lines(density(replicate(5000, est.ate(rnorm(length(classroom.ids)) +
rnorm(length(classroom.ids)), randomize.clustered())))) #not clustered
plot(density(replicate(5000, est.ate(rnorm(length(classroom.ids)), randomize.clustered()))), xlim=c(-2,2)) #no classroom level noise added
lines(density(replicate(5000, est.ate(rnorm(length(classroom.ids)) +
classroom.level.noise[classroom.ids], randomize.clustered()))))
lines(density(replicate(5000, est.ate(rnorm(length(classroom.ids)) +
rnorm(length(classroom.ids)), randomize.clustered())))) #not clustered noise of same size
unique(distribution.under.sharp.null)
?log
?log2
log2(2)
log2(0.5)
-.1*log2(0.1)-.2*log2(.2)-.7*log2(.7)
-4*log2(4)/21 - 17*log2(17)/21
-4*log2(4/21)/21 - 17*log2(17/21)/21
-.9*log2(.9) - .1*log2(.1)
21/40*(-4*log2(4/21)/21 - 17*log2(17/21)/21)+10/40*(-.9*log2(.9) - .1*log2(.1))
-18/40*log2(18/40)-22/40*log2(22/40)
.99-.486
0.9927745-.4860438
p.purchase <- (.2+.5)/100
n1 <- 1000000 * .5
n2 <- 1000000 * .5
p.purchase.se <-sqrt(p.purchase*(1-p.purchase)*(1/n1+1/n2))
p.purchase.CI <- c(p.purchase-1.96*p.purchase.se, p.purchase+1.96*p.purchase.se)
p.purchase <- (.2)/100
n1 <- 1000000 * .5
n2 <- 1000000 * .5
p.purchase.se <- sqrt(p.purchase*(1-p.purchase)*(1/n1+1/n2))
p.purchase.CI <- c(p.purchase-1.96*p.purchase.se, p.purchase+1.96*p.purchase.se)
n1 <- 1000000 * .5
n2 <- 1000000 * .5
x1 <- n1 * 0.5/100
x2 <- n2 * (.5+.2)/100
p.purchase <- (x1+x2)/(n1+n2)
p.purchase.se <- sqrt(p.purchase*(1-p.purchase)*(1/n1+1/n2))
p.purchase.CI <- c(p.purchase-1.96*p.purchase.se, p.purchase+1.96*p.purchase.se)
n.total <- 1000000
rm(list=ls())
n.total <- 1000000
n1 <- n.total * .5
n2 <- n.total * .5
get.p.ci <- function(n1, n2) {
x1 <- n1 * 0.5/100
x2 <- n2 * (.5+.2)/100
p.purchase <- (x1+x2)/(n1+n2)
p.purchase.se <- sqrt(p.purchase*(1-p.purchase)*(1/n1+1/n2))
p.purchase.CI <- c(p.purchase-1.96*p.purchase.se, p.purchase+1.96*p.purchase.se)
return (p.purchase.CI)
}
p.purchase.ci.1 <- get.p.ci(n1, n2)
n1 <- 1/100 * n.total
n2 <- 99/100 * n.total
p.purchase.ci.2 <- get.p.ci(n1, n2)
mean(p.purchase.ci.2)
mean(p.purchase.ci.1)
rm(list=ls())
n.visitor <- 1000000
ad.cost <- 0.10 * n.visitor
with.ads.profit <- ad.cost
n.buy.with.ads <- with.ads.profit/100
percent.increase <- n.buy.with.ads/n.visitor*100
rm(list=ls())
n.visitor <- 1000000
ad.investment <- 0.10 * n.visitor
with.ads.gain <- ad.investment
n.buy.with.ads <- with.ads.gain/100
percent.increase <- n.buy.with.ads/n.visitor*100
n1 <- n.visitor * .5
n2 <- n.visitor * .5
get.p.ci <- function(n1, n2) {
x1 <- n1 * 0.5/100
x2 <- n2 * (.5+.2)/100
p.purchase <- (x1+x2)/(n1+n2)
p.purchase.se <- sqrt(p.purchase*(1-p.purchase)*(1/n1+1/n2))
p.purchase.CI <- c(p.purchase-1.96*p.purchase.se, p.purchase+1.96*p.purchase.se)
return (p.purchase.CI)
}
p.purchase.ci.1 <- get.p.ci(n1, n2)
n1 <- 1/100 * n.visitor
n2 <- 99/100 * n.visitor
p.purchase.ci.2 <- get.p.ci(n1, n2)
p.purchase.ci.width <- p.purchase.ci.2[2]-p.purchase.ci.2[1]
p.ci.width.1 <- p.purchase.ci.1[2]-p.purchase.ci.1[1]
outcome=rep(1,52)
outcome=[rep(1,52),rep(0,48),rep(1,29),rep(0,71),rep(1,37),rep(0,63),rep(1,34),rep(66)]
outcome=c(rep(1,52),rep(0,48),rep(1,29),rep(0,71),rep(1,37),rep(0,63),rep(1,34),rep(66))
outcome=c(rep(1,52),rep(0,48),rep(1,29),rep(0,71),rep(1,37),rep(0,63),rep(1,34),rep(66))
outcome=c(rep(1,52),rep(0,48),rep(1,29),rep(0,71),rep(1,37),rep(0,63),rep(1,34),rep(0,66))
outcome=c(rep(1,52),rep(0,48),rep(1,29),rep(0,71),rep(1,37),rep(0,63),rep(1,34),rep(0,66))
is.colin =c(rep(1,200),rep(0,200))
good.grammar = c(rep(1,100),c(0.100),rep(1,100),c(0.100))
good.grammar = c(rep(1,100),rep(0.100),rep(1,100),rep(0.100))
good.grammar = c(rep(1,100),rep(0.100),rep(1,100),rep(0.100))
good.grammar = c(rep(1,100), rep(0,100), rep(1,100), rep(0,100))
data <- data.frame(
po = outcome
colin = is.colin
good_grammar = good.grammar)
data <- data.frame(
po = outcome,
colin = is.colin,
good_grammar = good.grammar)
data <- data.frame(
po = outcome,
colin = is.colin,
jose = 1-is.colin,
good_grammar = good.grammar)
data <- data.frame(
po = outcome,
jose = 1-is.colin,
good_grammar = good.grammar)
lm(po~jose+good_grammar+jose|good_grammar)
lm(po~jose+good_grammar+jose|good_grammar, data=data)
model<-lm(po~jose+good_grammar+jose|good_grammar, data=data)
summary(model)
lm(po~jose+good_grammar, data=data)
lm(po~jose+good_grammar+jose|good_grammar, data=data)
outcome=c(rep(1,52),rep(0,48),rep(1,29),rep(0,71),rep(1,37),rep(0,63),rep(1,34),rep(0,66))
is.jose =c(rep(0,200),rep(1,200))
good.grammar = c(rep(0,100), rep(1,100), rep(0,100), rep(1,100))
#should be called bad.grammar
both = c(rep(0,100), rep(0,100), rep(0,100), rep(1,100))
data <- data.frame(  po = outcome,  jose = is.jose,  good_grammar = good.grammar, both = both)
lm <- lm(data$po ~ data$jose + data$good_grammar + data$both)
lm
outcome=c(rep(1,52),rep(0,48),rep(1,29),rep(0,71),rep(1,37),rep(0,63),rep(1,34),rep(0,66))
is.colin =c(rep(1,200),rep(0,200))
good.grammar = c(rep(1,100), rep(0,100), rep(1,100), rep(0,100))
data <- data.frame(
po = outcome,
jose = 1-is.colin,
good_grammar = good.grammar)
lm(po~jose+good_grammar+jose|good_grammar, data=data)
lm(po~jose+good_grammar+jose*good_grammar, data=data)
lm <- lm(po ~ jose + good_grammar + jose*good_grammar, data=data)
outcome=c(rep(1,52),rep(0,48),rep(1,29),rep(0,71),rep(1,37),rep(0,63),rep(1,34),rep(0,66))
is.jose =c(rep(0,200),rep(1,200))
good.grammar = c(rep(0,100), rep(1,100), rep(0,100), rep(1,100))
#should be called bad.grammar
both = c(rep(0,100), rep(0,100), rep(0,100), rep(1,100))
data <- data.frame(  po = outcome,  jose = is.jose,  good_grammar = good.grammar, both = both)
lm <- lm(po ~ jose + good_grammar + jose*good_grammar, data=data)
lm
(6/.6+6/.8)/(1/.4+1/.6+1/.8)
pnorm
?pnorm
pnorm(2,5,0.01)
pnorm(2,5.05,0.01)
pnorm(1.96,0,1)
pnorm(2,0.05,1)
pnorm(2,0.05,1)-1
1.645/40
1.645/40+5
pnorm(1.645, 0.05, 1)
pnorm(1.645, 0.05, 1)-1
sqrt(4)
sqrt(.4382*(1-.4382)/429)
188/429
(188/429-0.5)/0.02395512
pnorm(0.01)
pnorm(0.5)
qnorm(0.5)
qnorm(0.01)
qnorm(0.99)
pnorm(-2.5786)
pnorm(-2.578637)
-2.326348+.05
pnorm(-2.276348)
pnorm(-2.326348+.1)
qnorm(0.01)
.5-.024*qnorm(0.01)
.5+.024*qnorm(0.01)
pnorm(-.36)
pnorm((0.4441677-0.45)/.024)
pnorm((0.4441677-0.45)/.024)-1
?lm
library(car)
str(Prestige)
summary(Prestige)
hist(Prestige.education)
hist(Prestige$education)
hist(Prestige$prestige)
plot(Prestige$prestige, Prestige$education)
m=lm(prestige ~ income, data=Prestige)
summary(m)
?Prestige
m <- lm(prestige~income^2, data=Prestige)
summary(m)
Prestige$inc2=Prestige$income
m <- lm(prestige~inc2, data=Prestige)
summary(m)
sqrt(115^2+100+4)
115/sqrt(115^2+100+4)
10/sqrt(115^2+100+4)
2/sqrt(115^2+100+4)
AirPassengers
?AirPassengers
class(AirPassengers)
is.ts(AirPassengers)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
plot.ts(AirPassengers)
aggregate(AirPassengers)
AP_subset = ts(AP,start=c(1952,1),end=c(1952,12),freq=12)plot(AP_subset)
AP_subset = ts(AP,start=c(1952,1),end=c(1952,12),freq=12)
AP_subset = ts(AirPassengers,start=c(1952,1),end=c(1952,12),freq=12)
plot(AP_subset)
agg=aggregate(AirPassengers)
plot.ts(agg)
cycle(AirPassengers)
?cycle
AirPassengers(cycle(AirPassengers))
cycle(AirPassengers)
bar(cycle(AirPassengers))
hist(cycle(AirPassengers))
boxplot(AirPassengers, cycle(AirPassengers))
boxplot(AirPassengers~ cycle(AirPassengers))
boxplot(AirPassengers~ cycle(AirPassengers))
decompose(AirPassengers)
?decompose
dec<-decompose(AirPassengers)
plot(dec)
dec<-decompose(AirPassengers,type='multiplicative')
plot(dec)
load('retailSales.Rdata')
# a quick glance at the summary shows the majority of data has NA
summary(retailSales)
setwd("~/Desktop/W271Data")
load('retailSales.Rdata')
setwd("~/GitHub/MIDS/MIDS-W271/lab2")
load('retailSales.Rdata')
# a quick glance at the summary shows the majority of data has NA
summary(retailSales)
# upon further check for incomplete records, they have NA in all ratio variables
sum(!complete.cases(retailSales))
View(retailSales)
library(car)
library(ggplot2)
library(lattice)
library(car)
library(lmtest)
library(sandwich)
library(AER)
library(ivpack)
library(stargazer)
setwd('~/GitHub/MIDS/MIDS-W271/lab2')
data <- read.csv("WageData2.csv", header = TRUE)
data$logWage <- log(data$wage)
data$experienceSquare <- data$experience^2
ols1 <- lm(logWage ~ education + experience, data=data)
se_ols1 <- robust.se(ols1)[,2]
ols2 <- lm(logWage ~ education + experience + experienceSquare + raceColor, data=data)
se_ols2 <- robust.se(ols2)[,2]
ols3 <- lm(logWage ~ education + experience + experienceSquare + raceColor
+ dad_education + mom_education, data=data)
se_ols3 <- robust.se(ols3)[,2]
ols4 <- lm(logWage ~ education + experience + experienceSquare + raceColor
+ dad_education + mom_education + rural + city, data=data)
se_ols4 <- robust.se(ols4)[,2]
tsls1 <- ivreg(logWage ~ education + experience | factor(z1)*factor(z2) + experience,
data = data)
se_tsls1 <- robust.se(tsls1)[,2]
tsls2 <- ivreg(logWage ~ education + experience + experienceSquare + raceColor |
factor(z1)*factor(z2) + experience + experienceSquare, data=data)
se_tsls2 <- robust.se(tsls2)[,2]
tsls3 <- ivreg(logWage ~ education + experience + experienceSquare + raceColor
+ dad_education + mom_education | factor(z1)*factor(z2) + experience
+ experienceSquare + dad_education + mom_education, data=data)
se_tsls3 <- robust.se(tsls3)[,2]
tsls4 <- ivreg(logWage ~ education + experience + experienceSquare + raceColor
+ dad_education + mom_education + rural + city | factor(z1)*factor(z2)
+ experience + experienceSquare + dad_education + mom_education
+ rural + city, data=data)
se_tsls4 <- robust.se(tsls4)[,2]
stargazer(ols1, tsls1, ols2, tsls2, ols3, tsls3, ols4, tsls4,
se = list(se_ols1, se_tsls1, se_ols2, se_tsls2,
se_ols3, se_tsls3, se_ols4, se_tsls4),
covariate.labels=c("education", "experience", "experience squared",
"race (1 = black)", "dad Education", "mom education"),
dep.var.labels = "Log Weekly Wage",
omit = c("city*","rural"),
out = "Q4_table.html", df= F,
omit.labels = c("rural", "city")
)
